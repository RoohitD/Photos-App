package controller;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ResourceBundle;
import classes.Album;
import classes.Photo;
import classes.User;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Modality;
import javafx.stage.Stage;

/**  
 * @author Rohit Deshmukh
 * Controller for the main page for the app
 */

public class mainPage_Controller implements Initializable {

    ObservableList<Album> albumlistObs = FXCollections.observableArrayList();

    private ObservableList<Photo> selectedAlbumPhotos = FXCollections.observableArrayList();

    FilteredList<Photo> filteredPhotos = new FilteredList<Photo>(selectedAlbumPhotos);

    @FXML
    private ListView<Album> albumList;

    @FXML
    private Button createAlbum;

    @FXML
    private Button deleteAlbum;

    @FXML
    private Button editAlbum;

    @FXML
    private Button logoutButton;

    @FXML
    private TableView<Photo> mainPage_Table;

    @FXML
    private Button removePhoto;

    @FXML
    private TextField searchBox;

    @FXML
    private Button slideshow;

    @FXML
    private TableColumn<Photo, String> tableCaption;

    @FXML
    private TableColumn<Photo, File> tableImage;

    @FXML
    private Button uploadButton;

    /**
    * Handles the "Create Album" button click event. Loads the album creation page
    * and sets it as the current scene.
    * @param event The ActionEvent object generated by the button click
    */
    @FXML
    void createAlbum_Handler(ActionEvent event) {
        try {
            Stage stage = (Stage) createAlbum.getScene().getWindow();
            Parent root = FXMLLoader.load(getClass().getResource("/scene/album-Creation-page.fxml"));
            Scene scene = new Scene(root);
            stage.setScene(scene);
        } catch (Exception e) {
        }
    }

    /**
    * Removes the selected album from the album list and from the current user's album list.
    * @param event the action event triggered when the "delete album" button is clicked
    */
    @FXML
    void deleteAlbum_Handler(ActionEvent event) {
        albumlistObs.remove(albumList.getSelectionModel().getSelectedItem());
        User.currentUser.removeAlbum(albumList.getSelectionModel().getSelectedItem());
    }

    /**
    * Event handler for the "Edit Album" button. Opens the album edit page, loads the selected album and sets it on the
    * album edit page controller. Changes the current scene to the album edit page. Removes the selected album from the
    * current user's album list.
    * @param event The action event generated by clicking the "Edit Album" button.
    */
    @FXML
    void editAlbum_Handler(ActionEvent event) {
        try {
            
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/scene/album-Edit-page.fxml"));
            Parent root = loader.load();

            albumEditPage_Controller editAlbumController = loader.getController();
            editAlbumController.setAlbum(albumList.getSelectionModel().getSelectedItem());

            Stage currentStage = (Stage) albumList.getScene().getWindow();
            Scene editAlbumScene = new Scene(root);
            currentStage.setScene(editAlbumScene);
            User.currentUser.getAlbumList().remove(albumList.getSelectionModel().getSelectedItem());
        } catch (Exception e) {
        }
    }

    /**
    * Handles the "Logout" button click event.
    * Sets the current user to null and navigates to the login page.
    * @param event the ActionEvent triggered by clicking the "Logout" button.
    */
    @FXML
    void logoutButton_Handler(ActionEvent event) {
        try {
            User.currentUser = null;
            Stage stage = (Stage) logoutButton.getScene().getWindow();
            Parent root = FXMLLoader.load(getClass().getResource("/scene/loginPage.fxml"));
            Scene scene = new Scene(root);
            stage.setScene(scene);
        } catch (Exception e) {
        }
    }

    /**
    * Removes the selected photo from the album and updates the album list and table
    * @param event the event that triggered this method
    */
    @FXML
    void removePhoto_Handler(ActionEvent event) {
        selectedAlbumPhotos.remove(mainPage_Table.getSelectionModel().getSelectedItem());
        User.currentUser.getAlbumList().get(mainPage_Table.getSelectionModel().getSelectedIndex()).getAlbumPhotos().remove(mainPage_Table.getSelectionModel().getSelectedItem());
        for (int i = 0; i < User.currentUser.getAlbumList().get(mainPage_Table.getSelectionModel().getSelectedIndex()).getAlbumPhotos().size(); i++) {
            System.out.println(User.currentUser.getAlbumList().get(mainPage_Table.getSelectionModel().getSelectedIndex()).getAlbumPhotos().get(i));
        }
    }

    /**
    * This method handles the action event of the slideshow button in the main page.
    * It loads the slideshowPage.fxml file and sets up the slideshow with the selected photos
    * from the selected album in the main page table view. The slideshow is shown as a modal
    * window until it is closed.
    * @param event The ActionEvent object that triggered the method
    */
    @FXML
    void slideshow_Handler(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/scene/slideshowPage.fxml"));
            Parent root = loader.load();
            slideshowPage_Controller popupController = loader.getController();
            popupController.setPhotos(selectedAlbumPhotos, mainPage_Table.getSelectionModel().getSelectedIndex());
            Scene scene = new Scene(root);
            Stage stage = new Stage();
            stage.initModality(Modality.APPLICATION_MODAL);
            stage.setScene(scene);
            stage.showAndWait();
        } catch (Exception e) {
        }
        
    }

    /**
    * Handles the upload button event. Redirects the user to the upload image page.
    * @param event the ActionEvent that triggers this method
    * @throws IOException if an I/O error occurs when loading the upload image page
    */
    @FXML
    void uploadButton_Handler(ActionEvent event) throws IOException {
        Stage stage = (Stage) uploadButton.getScene().getWindow();
        Parent root = FXMLLoader.load(getClass().getResource("/scene/upload-image-page.fxml"));
        Scene scene = new Scene(root);
        stage.setScene(scene);
    }

    /**
    * Initializes the main page with the current user's albums and their respective photos.
    * Also sets up the table view to display photos in the selected album with their captions and thumbnail images.
    * Implements a listener to update the table view with the photos from the newly selected album.
    * Enables searching for photos in the table view based on their caption, date, and tags.
    */
    @Override
    public void initialize(URL location, ResourceBundle resources) {

        albumlistObs.addAll(User.currentUser.getAlbumList());
        albumList.setItems(albumlistObs);
        
        tableCaption.setCellValueFactory(new PropertyValueFactory<Photo, String>("caption"));
        tableImage.setCellValueFactory(new PropertyValueFactory<Photo, File>("image"));
        tableImage.setCellFactory(column -> {
            return new TableCell<Photo, File>() {
                private final ImageView imageView = new ImageView();
                
                @Override
                protected void updateItem(File file, boolean empty) {
                    super.updateItem(file, empty);
                    if (file == null || empty) {
                        setGraphic(null);
                    } else {
                        Image image = new Image(file.toURI().toString());
                        imageView.setImage(image);
                        imageView.setFitWidth(150); // set the width and height of the image view
                        imageView.setFitHeight(150);
                        setGraphic(imageView);
                    }
                }
            };
        });

        albumList.getSelectionModel().select(0);
        albumList.getSelectionModel().selectedIndexProperty().addListener( (obs, oldVal, newVal) -> {
            if (newVal.intValue() >= 0) { // Make sure an item is selected
                Album selectedAlbum = albumList.getItems().get(newVal.intValue());
                selectedAlbumPhotos.setAll(selectedAlbum.getAlbumPhotos());
            }
        });
        


        mainPage_Table.setOnMouseClicked(event -> {
            if (event.getClickCount() == 2 && mainPage_Table.getSelectionModel().getSelectedItem() != null) {
                try {
                    previewImage();
                } catch (Exception e) {

                }
                
            }
        });
        mainPage_Table.setItems(selectedAlbumPhotos);
    
        searchBox.setPromptText("Search");
        searchBox.textProperty().addListener((observable, oldValue, newValue) -> {
            mainPage_Table.setItems(FXCollections.observableArrayList(selectedAlbumPhotos.filtered(photo -> {
                String query = newValue.toLowerCase();
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy");
                return photo.getCaption().toLowerCase().contains(query) ||
                        dateFormat.format(photo.getDate()).contains(query) ||
                        photo.returnTags().values().stream().anyMatch(tag -> tag.toLowerCase().contains(query));
    })));
});


}

    /**
    * Displays a preview of the selected photo in a new window.
    * Loads the imagePreview.fxml file and sets the scene.
    * Sets the selected photo in the controller to be displayed.
    * Creates a new stage and shows the scene in the stage.
    * @throws IOException if there is an error while loading the fxml file.
    */
    private void previewImage() throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/scene/imagePreview.fxml"));
        Parent root = loader.load();
        Scene scene = new Scene(root);
        imagePreview_Controller imagePreview_Controller = loader.getController();
        Photo selectedPhoto = mainPage_Table.getSelectionModel().getSelectedItem();
        imagePreview_Controller.setPhoto(selectedPhoto);
        Stage stage = new Stage();
        stage.setTitle("Image Preview");
        stage.setScene(scene);
        stage.show();
    }

}
